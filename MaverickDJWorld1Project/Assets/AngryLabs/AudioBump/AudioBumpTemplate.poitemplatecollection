#T#AngryLabsAudioBumpProperties
// AngryLabs AudioBump
[HideInInspector] m_start_AngryLabsAudioBump ("AudioBump--{reference_property:_AngryLabsAudioBumpEnabled}", Float) = 0
[HideInInspector] [ThryToggle(_AngryLabsAudioBumpEnableKeyword)]_AngryLabsAudioBumpEnabled ("Audio bump enabled", Float) = 1
[ThryHeaderLabel(Blend Shape control, 12)]

[ToggleUI] _AngryLabsAudioBumpUseBlendshapes("Use Blendshape texture", Float) = 0

 _AngryLabsAudioBumpBlendshapes ("Blend shape texture", 2D) = "black" { }

_AngryLabsAudioBumpScale ("Blendshape Scale Correction", Float) = 1.0

[ThryHeaderLabel(Audiolink Bands for blend shapes, 13)]
[ThryHeaderLabel(x is Low, 13)]
[ThryHeaderLabel(y is MidLow, 13)]
[ThryHeaderLabel(z is MidHigh, 13)]
[ThryHeaderLabel(w is High, 13)]
_AngryLabsAudioBumpBlend1 ("Blendshape 1", Vector) = (1.0, 0.0, 0.0, 0.0)
_AngryLabsAudioBumpBlend2 ("Blendshape 2", Vector) = (0.0, 1.0, 0.0, 0.0)
_AngryLabsAudioBumpBlend3 ("Blendshape 3", Vector) = (0.0, 0.0, 1.0, 0.0)
_AngryLabsAudioBumpBlend4 ("Blendshape 4", Vector) = (0.0, 0.0, 0.0, 1.0)
[HideInInspector] m_end_AngryLabsAudioBump ("AudioBump - end", Float) = 0

#T#AngryLabsAudioBumpKeywords
// AngryLabs AudioBump
#pragma shader_feature _AngryLabsAudioBumpEnableKeyword
//#define _AngryLabsAudioBumpEnableKeyword

#T#AngryLabsAudioBumpVariables
// AngryLabs AudioBump
#ifdef _AngryLabsAudioBumpEnableKeyword
	float _AngryLabsAudioBumpUseBlendshapes;
	sampler2D_float _AngryLabsAudioBumpBlendshapes;
	float4 _AngryLabsAudioBumpBlendshapes_TexelSize;
	
	float _AngryLabsAudioBumpScale;
	float4 _AngryLabsAudioBumpBlend1;
	float4 _AngryLabsAudioBumpBlend2;
	float4 _AngryLabsAudioBumpBlend3;
	float4 _AngryLabsAudioBumpBlend4;
#endif


#T#AngryLabsAudioBumpFunctions
// AngryLabs AudioBump
#ifdef _AngryLabsAudioBumpEnableKeyword

float AngryLabsAudioBumpVertexBandSelect(int band, float4 audio){
	switch(band){
		case 0: return audio.x; 
		case 1: return audio.y; 
		case 2: return audio.z; 
		case 3: return audio.w; 
		default: return 0.0f;
	}
}

float3 AngryLabsAudioBumpApplyVertexOffset(float4 audio, float4 maskValue, float generalScale, float3 normal, 
		float4 directionR, float4 directionG, float4 directionB, float4 directionA,
		int bandR, int bandG, int bandB, int bandA
		) {
	float4 rd = AngryLabsAudioBumpVertexBandSelect(bandR, audio) * directionR * maskValue.r;
	float4 gd = AngryLabsAudioBumpVertexBandSelect(bandG, audio) * directionB * maskValue.g;
	float4 bd = AngryLabsAudioBumpVertexBandSelect(bandB, audio) * directionG * maskValue.b;
	float4 ad = AngryLabsAudioBumpVertexBandSelect(bandA, audio) * directionA * maskValue.a;
	
	float4 total = rd + gd + bd + ad;
	
	float3 ret = total.xyz + total.w * normal;
	return ret * generalScale * audio;
}

//#include "Assets/AngryLabs/AudioBump/AudioBump.cginc"

float2 AngryLabsAudioBumpIndexToUV(uint index, uint textureSize) {
	int x = index % textureSize;
	int y = index / textureSize;
	
	float2 raw = float2(x + 0.5, y + 0.5) / textureSize;
	
	return raw;
}

float3 AngryLabsAudioBumpVertexDisplace (sampler2D_float blendTexture, int index, float amount, float3 position, inout float3 normal, float3 tangent, float3 binormal, int textureSize, float blendScale) {
	float2 one = float2(1.0 / textureSize, 0);
		
	float2 blendSampleUV;
	float3 sampledDelta;
	float3 delta;
	
	blendSampleUV = AngryLabsAudioBumpIndexToUV(index, textureSize);
	sampledDelta = tex2Dlod( blendTexture, float4( blendSampleUV, 0, 0.0) ).rgb;
	delta = sampledDelta;
	delta *= amount * blendScale;
	position += ( delta.x * normal ) + ( delta.y * tangent ) + ( delta.z * binormal );
	
	blendSampleUV = AngryLabsAudioBumpIndexToUV(index + 1, textureSize);
	sampledDelta = tex2Dlod( blendTexture, float4( blendSampleUV, 0, 0.0) ).rgb;
	delta = sampledDelta * blendScale;
	delta *= amount;
	normal += ( delta.x * normal ) + ( delta.y * tangent ) + ( delta.z * binormal );
	normal = normalize(normal);
	
	return position;
}

float3 AngryLabsAudioBumpApplyBlendshape(float4 audio, int vertex_id, float textureSize, sampler2D blendShapes, 
	float4 blend1, float4 blend2, float4 blend3, float4 blend4, 
	float3 normal, float4 tangent, float blendScale) {

	float4 audioMod[4] = { blend1, blend2, blend3, blend4 };
	
	float2 vcolor_uv = float2(0.5, 0.5) / textureSize;
	float4 vcolor = tex2Dlod( blendShapes , float4( vcolor_uv, 0, 0.0) ).rgba;
	int verticies = vcolor.r;
	int shapes = vcolor.g;
	
	float3 ret = float3(0,0,0);

	normal = normalize(normal);

	float3 tangent3 = normalize(tangent.xyz);	
	float3 biNormal = cross( normal , tangent3 ) * tangent.w;
	
	// Sum up the blend shape offsets into "ret"
	for(int i=0; i<shapes; i++) 
	{
		float4 audioMuled = audio * audioMod[i];
		
		switch(i){
			case 0: audioMuled = audio * blend1; break;
			case 1: audioMuled = audio * blend2; break;
			case 2: audioMuled = audio * blend3; break;
			case 3: audioMuled = audio * blend4; break;
		}

		float audioLen = length(audioMuled);
		
        int offset = 1 + vertex_id * 2;
        int shape = verticies * 2 * i;
		int vert = offset + shape;
		ret += AngryLabsAudioBumpVertexDisplace(blendShapes, vert, audioLen, ret, normal, tangent3, biNormal, textureSize, blendScale);
	}
	
	return ret;
}

#endif


#T#AngryLabsAudioBumpImplimentation
// AngryLabs AudioBump
#ifdef _AngryLabsAudioBumpEnableKeyword
	[unroll]
	do {

		//just inline the check instead of pulling in the whole audio link 
		int hasAudioLink;
		#if !defined(AUDIOLINK_STANDARD_INDEXING)
		int width, height;
		_AudioTexture.GetDimensions(width, height);
		hasAudioLink =  width > 16;
		#else
		hasAudioLink = _AudioTexture_TexelSize.z > 16;
		#endif
		
		if(!hasAudioLink) break; 

		float4 audio = float4(
								AudioLinkData(ALPASS_AUDIOBASS).r,
								AudioLinkData(ALPASS_AUDIOLOWMIDS).r,
								AudioLinkData(ALPASS_AUDIOHIGHMIDS).r,
								AudioLinkData(ALPASS_AUDIOTREBLE).r
								);
					
		float3 angryLabsAudioBumpOffset = float3(0, 0, 0);
		
		float4 zero = float4(0,0,0,0);
		
		float3 oNormal = o.objNormal;
		
		if(_AngryLabsAudioBumpUseBlendshapes) {
			angryLabsAudioBumpOffset += AngryLabsAudioBumpApplyBlendshape(
				audio,
				v.vertexId,
				_AngryLabsAudioBumpBlendshapes_TexelSize.z,
				_AngryLabsAudioBumpBlendshapes,
				_AngryLabsAudioBumpBlend1, _AngryLabsAudioBumpBlend2, _AngryLabsAudioBumpBlend3, _AngryLabsAudioBumpBlend4,
				v.normal,
                v.tangent,
				_AngryLabsAudioBumpScale
				);
		}
		
		localOffset += angryLabsAudioBumpOffset;
		worldOffset += angryLabsAudioBumpOffset;
	} while(false);
	
#endif
